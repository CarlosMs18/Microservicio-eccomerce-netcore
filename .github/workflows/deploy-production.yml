name: Production Deploy

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DEPLOY" to confirm production deployment'
        required: true
        default: ''

env:
  DOTNET_VERSION: '7.0.x'
  AZURE_CONTAINER_REGISTRY: 'microservicioscarlos'

jobs:
  production-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  
    
    steps:
      - name: Confirm Deployment
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DEPLOY" ]; then
            echo "Deployment cancelled. You must type 'DEPLOY' to confirm."
            exit 1
          fi
          echo "Production deployment confirmed!"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login to ACR
        run: |
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
          
      - name: Build and Push Images to ACR
        run: |
          echo "Building images with latest tag"
          ACR_URL="${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io"
          TAG="prod-$(date +%Y%m%d-%H%M%S)"  
          
          echo "Using production tag: $TAG"
   
          echo "Building Cart service..."
          dotnet publish src/Cart/Cart.WebAPI/Cart.WebAPI.csproj -c Release -o src/Cart/Cart.WebAPI/publish
          docker build -t $ACR_URL/microservicio-cart:$TAG -f src/Cart/Cart.WebAPI/Dockerfile .
          docker push $ACR_URL/microservicio-cart:$TAG
          
          echo "Building Catalog service..."
          dotnet publish src/Catalog/Catalog.WebApi/Catalog.WebAPI.csproj -c Release -o src/Catalog/publish
          docker build -t $ACR_URL/microservicio-catalog:$TAG -f src/Catalog/Catalog.WebApi/Dockerfile .
          docker push $ACR_URL/microservicio-catalog:$TAG
          
          echo "Building User service..."
          dotnet publish src/User/User.WebAPI/User.WebAPI.csproj -c Release -o src/User/publish
          docker build -t $ACR_URL/microservicio-usuario:$TAG -f src/User/User.WebAPI/Dockerfile .
          docker push $ACR_URL/microservicio-usuario:$TAG
          
          echo "All images built and pushed to ACR with tag: $TAG"
          
       
          echo "PROD_TAG=$TAG" >> $GITHUB_ENV
          
      - name: Update Production Manifests (GitOps)
        run: |
          echo "Updating production manifests with new tag: $PROD_TAG"
          
    
          sed -i "s|newTag: .*|newTag: $PROD_TAG|g" k8s/overlays/production/kustomization.yaml
          
          echo "Updated kustomization.yaml content:"
          cat k8s/overlays/production/kustomization.yaml
          
      - name: Commit and Push Changes (GitOps)
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action - Production Deploy"
          
          git add k8s/overlays/production/kustomization.yaml
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Production deploy: Update images to $PROD_TAG"
            git push origin main
            echo " Changes pushed to Git - ArgoCD will handle deployment!"
          fi
          
      - name: Deployment Summary
        run: |
          echo " Production deployment process completed!"
          echo ""
          echo " Summary:"
          echo "  • Images built and pushed to ACR with tag: $PROD_TAG"
          echo "  • Production manifests updated in Git"
          echo "  • ArgoCD will automatically sync changes to AKS cluster"
          echo ""
          echo " Next steps:"
          echo "  • Monitor ArgoCD UI for deployment progress"
          echo "  • Check AKS cluster: kubectl get pods -n prod"
          echo "  • ArgoCD sync typically takes 1-3 minutes"