name: Test Migration Job

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to test migration'
        required: true
        default: 'user'
        type: choice
        options:
        - user
        - cart
        - catalog
      environment:
        description: 'Target environment'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging
  push:
    branches: 
      - main
      - develop
      - 'feature/migration-*'
      - 'hotfix/migration-*'
    paths:
      - 'src/**'
      - '.github/workflows/test-migration-job.yml'
      - 'k8s/**'
  pull_request:
    branches: 
      - main
      - develop
    paths:
      - 'src/**'
      - 'k8s/**'

env:
  DOTNET_VERSION: '7.0.x'
  CLUSTER_NAME: 'migration-test'
  NAMESPACE: 'migration-test'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      service: ${{ steps.set-service.outputs.service }}
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Set service output
        id: set-service
        run: echo "service=${{ github.event.inputs.service || 'user' }}" >> $GITHUB_OUTPUT
      
      - name: Set environment output
        id: set-environment
        run: echo "environment=${{ github.event.inputs.environment || 'test' }}" >> $GITHUB_OUTPUT

  detect-changes:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    outputs:
      user: ${{ steps.changes.outputs.user }}
      cart: ${{ steps.changes.outputs.cart }}
      catalog: ${{ steps.changes.outputs.catalog }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            user:
              - 'src/User/**'
              - 'k8s/**/user/**'
            cart:
              - 'src/Cart/**'
              - 'k8s/**/cart/**'
            catalog:
              - 'src/Catalog/**'
              - 'k8s/**/catalog/**'
            workflows:
              - '.github/workflows/**'

  setup-infrastructure:
    runs-on: ubuntu-latest
    needs: [validate-inputs, detect-changes]
    if: always() && !cancelled() && !failure()
    outputs:
      cluster-ready: ${{ steps.cluster-status.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: infra/kind/kind-config.yaml
          wait: 300s
          
      - name: Verify cluster status
        id: cluster-status
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          echo "ready=true" >> $GITHUB_OUTPUT
          
      - name: Setup storage class
        run: |
          kubectl apply -f - <<EOF
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: rancher.io/local-path
          volumeBindingMode: WaitForFirstConsumer
          reclaimPolicy: Delete
          EOF
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Create test namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          kubectl label namespace ${{ env.NAMESPACE }} environment=test
          
      - name: Test external connectivity
        run: |
          echo "Testing connectivity to Azure SQL Database"
          nslookup microservices-sql-server.database.windows.net
          
  build-services:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure]
    if: needs.setup-infrastructure.outputs.cluster-ready == 'true'
    strategy:
      matrix:
        service: [user, cart, catalog]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Determine if service should build
        id: should-build
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ matrix.service }}" == "${{ needs.validate-inputs.outputs.service || 'user' }}" ]]; then
              echo "build=true" >> $GITHUB_OUTPUT
            else
              echo "build=false" >> $GITHUB_OUTPUT
            fi
          else
            if [[ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]]; then
              echo "build=true" >> $GITHUB_OUTPUT
            else
              echo "build=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Build User service
        if: steps.should-build.outputs.build == 'true' && matrix.service == 'user'
        run: |
          echo "Building User service"
          dotnet publish src/User/User.WebAPI/User.WebAPI.csproj -c Release -o src/User/User.WebAPI/publish
          docker build -t user-service:migration-test -f src/User/User.WebAPI/Dockerfile .
          kind load docker-image user-service:migration-test --name ${{ env.CLUSTER_NAME }}
          
      - name: Build Cart service
        if: steps.should-build.outputs.build == 'true' && matrix.service == 'cart'
        run: |
          echo "Building Cart service"
          dotnet publish src/Cart/Cart.WebAPI/Cart.WebAPI.csproj -c Release -o src/Cart/Cart.WebAPI/publish
          docker build -t cart-service:migration-test -f src/Cart/Cart.WebAPI/Dockerfile .
          kind load docker-image cart-service:migration-test --name ${{ env.CLUSTER_NAME }}
          
      - name: Build Catalog service
        if: steps.should-build.outputs.build == 'true' && matrix.service == 'catalog'
        run: |
          echo "Building Catalog service"
          dotnet publish src/Catalog/Catalog.WebApi/Catalog.WebAPI.csproj -c Release -o src/Catalog/publish
          docker build -t catalog-service:migration-test -f src/Catalog/Catalog.WebApi/Dockerfile .
          kind load docker-image catalog-service:migration-test --name ${{ env.CLUSTER_NAME }}

  database-migration:
    runs-on: ubuntu-latest
    needs: [build-services, validate-inputs, detect-changes]
    if: always() && !cancelled() && !failure()
    strategy:
      matrix:
        service: [user, cart, catalog]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Determine if migration should run
        id: should-migrate
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ matrix.service }}" == "${{ needs.validate-inputs.outputs.service || 'user' }}" ]]; then
              echo "migrate=true" >> $GITHUB_OUTPUT
            else
              echo "migrate=false" >> $GITHUB_OUTPUT
            fi
          else
            if [[ "${{ needs.detect-changes.outputs[matrix.service] }}" == "true" ]]; then
              echo "migrate=true" >> $GITHUB_OUTPUT
            else
              echo "migrate=false" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Create migration job
        if: steps.should-migrate.outputs.migrate == 'true'
        run: |
          SERVICE=${{ matrix.service }}
          TIMESTAMP=$(date +%s)
          CONNECTION_STRING="Server=tcp:microservices-sql-server.database.windows.net,1433;Initial Catalog=microservices-db;Persist Security Info=False;User ID=sqladmin;Password=Admin123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
          
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${SERVICE}-migration-${TIMESTAMP}
            namespace: ${{ env.NAMESPACE }}
            labels:
              app: ${SERVICE}-migration
              job-type: database-migration
              service: ${SERVICE}
              timestamp: "${TIMESTAMP}"
          spec:
            ttlSecondsAfterFinished: 600
            backoffLimit: 2
            activeDeadlineSeconds: 600
            template:
              metadata:
                labels:
                  app: ${SERVICE}-migration
                  service: ${SERVICE}
              spec:
                restartPolicy: Never
                containers:
                - name: migration
                  image: ${SERVICE}-service:migration-test
                  command: 
                  - /bin/sh
                  - -c
                  - |
                    echo "Starting database migration for ${SERVICE} service"
                    echo "Target: Azure SQL Database"
                    echo "Timestamp: ${TIMESTAMP}"
                    echo "Waiting for network connectivity..."
                    sleep 15
                    echo "Installing EF Core tools..."
                    dotnet tool install --global dotnet-ef || echo "EF tools already installed"
                    export PATH="\$PATH:/root/.dotnet/tools"
                    echo "Running Entity Framework migrations..."
                    dotnet ef database update --verbose --no-build
                    echo "Migration completed successfully!"
                  env:
                  - name: ASPNETCORE_ENVIRONMENT
                    value: "Development"
                  - name: ConnectionStrings__DefaultConnection
                    value: "${CONNECTION_STRING}"
                  - name: SERVICE_NAME
                    value: "${SERVICE}"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  securityContext:
                    runAsNonRoot: false
                    allowPrivilegeEscalation: false
          EOF
          
      - name: Monitor migration job
        if: steps.should-migrate.outputs.migrate == 'true'
        run: |
          SERVICE=${{ matrix.service }}
          TIMESTAMP=$(date +%s)
          JOB_NAME="${SERVICE}-migration-${TIMESTAMP}"
          
          echo "Monitoring migration job for ${SERVICE} service"
          
          kubectl wait --for=condition=complete job -l service=${SERVICE} -n ${{ env.NAMESPACE }} --timeout=600s || {
            echo "Migration job failed or timed out"
            kubectl describe job -l service=${SERVICE} -n ${{ env.NAMESPACE }}
            kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=100
            exit 1
          }
          
          echo "Migration completed successfully for ${SERVICE} service"
          
      - name: Verify migration results
        if: steps.should-migrate.outputs.migrate == 'true'
        run: |
          SERVICE=${{ matrix.service }}
          
          echo "Verifying migration results for ${SERVICE} service"
          
          kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }}
          kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=50
          
          echo "Testing database connectivity"
          kubectl run db-test-${SERVICE} --rm -i --restart=Never \
            --image=mcr.microsoft.com/mssql-tools \
            --namespace=${{ env.NAMESPACE }} \
            --timeout=60s \
            -- /opt/mssql-tools/bin/sqlcmd \
            -S microservices-sql-server.database.windows.net \
            -U sqladmin \
            -P 'Admin123' \
            -d microservices-db \
            -Q "SELECT 'Migration verification for ${SERVICE}' as Result, GETDATE() as Timestamp;" || echo "Database connectivity test failed"

  cleanup:
    runs-on: ubuntu-latest
    needs: [database-migration]
    if: always()
    steps:
      - name: Cleanup test environment
        run: |
          echo "Cleaning up test environment"
          kind delete cluster --name ${{ env.CLUSTER_NAME }} || echo "Cluster already deleted"
          
  report-results:
    runs-on: ubuntu-latest
    needs: [database-migration, cleanup]
    if: always()
    steps:
      - name: Generate test report
        run: |
          echo "Migration Test Results"
          echo "======================"
          echo "Workflow: ${{ github.workflow }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          if [[ "${{ needs.database-migration.result }}" == "success" ]]; then
            echo "Status: SUCCESS"
            echo "All migration jobs completed successfully"
          else
            echo "Status: FAILED"
            echo "One or more migration jobs failed"
          fi