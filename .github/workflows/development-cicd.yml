name: Development CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      cart: ${{ steps.changes.outputs.cart }}
      catalog: ${{ steps.changes.outputs.catalog }}
      user: ${{ steps.changes.outputs.user }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            cart:
              - 'src/Cart/**'
              - 'tests/Cart/**'
              - 'k8s/base/apps/cart/**'
            catalog:
              - 'src/Catalog/**'
              - 'tests/Catalog/**'
              - 'k8s/base/apps/catalog/**'
            user:
              - 'src/User/**'
              - 'tests/User/**'
              - 'k8s/base/apps/user/**'

  ci-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.cart == 'true' || needs.detect-changes.outputs.catalog == 'true' || needs.detect-changes.outputs.user == 'true'
    
    strategy:
      matrix:
        service: [cart, catalog, user]
        
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: P@ssw0rd123!
        ports:
          - 1433:1433
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          
      - name: Run Unit Tests
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: dotnet test tests/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}.UnitTests/ --configuration Release --verbosity normal
        
      - name: Run Integration Tests
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: dotnet test tests/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}.IntegrationTests/ --configuration Release --verbosity normal

  cd-deploy:
    needs: [detect-changes, ci-tests]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.cart == 'true' || needs.detect-changes.outputs.catalog == 'true' || needs.detect-changes.outputs.user == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          
      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: netpol-test
          config: infra/kind/kind-config.yaml
          
      - name: Wait for cluster to be ready
        run: |
          kubectl cluster-info
          kubectl get nodes
          
      - name: Create local storage class
        run: |
          kubectl apply -f - <<EOF
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: rancher.io/local-path
          volumeBindingMode: WaitForFirstConsumer
          reclaimPolicy: Delete
          EOF
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Install Calico CNI (for Network Policies)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
          kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=300s
          
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
          
      - name: Setup Helm
        uses: azure/setup-helm@v3
        
      - name: Install Prometheus Stack
        run: |
          echo "Adding Prometheus Helm repository..."
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          
          echo "Installing Prometheus Stack..."
          helm install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --create-namespace \
            --set prometheus.service.type=NodePort \
            --set grafana.service.type=NodePort \
            --wait --timeout=10m
          
          echo "Prometheus Stack installed successfully!"
          
      - name: Build All Services for Development
        run: |
          TAG=${GITHUB_SHA:0:7}
          echo "Using tag: $TAG"
          
          echo "Building all services for development environment..."
          
          echo "Building Cart service..."
          dotnet publish src/Cart/Cart.WebAPI/Cart.WebAPI.csproj -c Release -o src/Cart/Cart.WebAPI/publish
          docker build -t cart-service:$TAG -f src/Cart/Cart.WebAPI/Dockerfile .
          kind load docker-image cart-service:$TAG --name netpol-test
          
          echo "Building Catalog service..."
          dotnet publish src/Catalog/Catalog.WebApi/Catalog.WebAPI.csproj -c Release -o src/Catalog/publish
          docker build -t catalog-service:$TAG -f src/Catalog/Catalog.WebApi/Dockerfile .
          kind load docker-image catalog-service:$TAG --name netpol-test
          
          echo "Building User service..."
          dotnet publish src/User/User.WebAPI/User.WebAPI.csproj -c Release -o src/User/publish
          docker build -t user-service:$TAG -f src/User/User.WebAPI/Dockerfile .
          kind load docker-image user-service:$TAG --name netpol-test
          
          echo "All images built and loaded successfully with tag: $TAG"
          
      - name: Debug Kustomization Files
        run: |
          echo "=== Checking file structure ==="
          find k8s -name "kustomization.yaml" -type f
          
          echo "=== Apps kustomization content ==="
          cat k8s/overlays/development/kustomization.yaml
          
          echo "=== Monitoring kustomization content ==="
          cat k8s/overlays/development/monitoring/kustomization.yaml
          
          echo "=== Testing kustomize build for apps ==="
          kubectl kustomize k8s/overlays/development/ || echo "Apps kustomization failed"
          
          echo "=== Testing kustomize build for monitoring ==="
          kubectl kustomize k8s/overlays/development/monitoring/ || echo "Monitoring kustomization failed"
       
      - name: Deploy to Development
        run: |
          echo "Deploying applications to development environment..."
          kubectl apply -k k8s/overlays/development/ || echo "Apps deployment failed"
          
          echo "Deploying monitoring to development environment..."
          kubectl apply -k k8s/overlays/development/monitoring/ || echo "Monitoring deployment failed"
          
          echo "Development deployment completed!"
          
      - name: Check Deployment Status
        run: |
          echo "=== Checking namespaces ==="
          kubectl get namespaces
          
          echo "=== Checking dev namespace resources ==="
          kubectl get all -n dev || echo "Dev namespace not found or empty"
          
          echo "=== Checking monitoring namespace resources ==="
          kubectl get all -n monitoring || echo "Monitoring namespace not found or empty"
          
      - name: Wait for Application Services
        run: |
          echo "Waiting for application services to be ready..."
          
          if kubectl get namespace dev > /dev/null 2>&1; then
            echo "Dev namespace found, waiting for pods..."
            kubectl wait --for=condition=ready pod -l app=cart-service -n dev --timeout=300s || echo "Cart service timeout"
            kubectl wait --for=condition=ready pod -l app=catalog-service -n dev --timeout=300s || echo "Catalog service timeout"
            kubectl wait --for=condition=ready pod -l app=user-service -n dev --timeout=300s || echo "User service timeout"
          else
            echo "ERROR: Dev namespace not found!"
            exit 1
          fi
          
      - name: Debug Deployment
        if: failure()
        run: |
          echo "=== Checking namespace ==="
          kubectl get namespace dev || echo "Namespace not found"
          
          echo "=== Checking deployments ==="
          kubectl get deployments -n dev || echo "No deployments found"
          
          echo "=== Checking pods ==="
          kubectl get pods -n dev -o wide || echo "No pods found"
          
          echo "=== Checking events ==="
          kubectl get events -n dev --sort-by=.metadata.creationTimestamp || echo "No events found"
          
          echo "=== Pod logs ==="
          kubectl logs -l app=sql-server -n dev --tail=50 || echo "No SQL logs"
          kubectl logs -l app=rabbitmq-service -n dev --tail=50 || echo "No RabbitMQ logs"
          kubectl logs -l app=cart-service -n dev --tail=50 || echo "No Cart logs"
          kubectl logs -l app=catalog-service -n dev --tail=50 || echo "No Catalog logs"
          kubectl logs -l app=user-service -n dev --tail=50 || echo "No User logs"
          
          echo "=== Describe pods ==="
          kubectl describe pods -n dev || echo "No pods to describe"
          
      - name: Test Deployment
        run: |
          echo "=== Final Status Check ==="
          kubectl get pods -o wide --all-namespaces
          kubectl get svc --all-namespaces
          kubectl get ingress -n dev || echo "No ingress found"
          kubectl get networkpolicies -n dev || echo "No network policies found"
          
          echo "=== Testing Services ==="
          
          if kubectl get namespace dev > /dev/null 2>&1; then
            echo "Testing Cart service..."
            if kubectl get svc cart-service -n dev > /dev/null 2>&1; then
              kubectl port-forward svc/cart-service 8080:80 -n dev &
              CART_PID=$!
              sleep 10
              curl -f http://localhost:8080/health || echo "Cart service not ready"
              kill $CART_PID 2>/dev/null || true
            else
              echo "Cart service not found"
            fi
            
            echo "Testing Catalog service..."
            if kubectl get svc catalog-service -n dev > /dev/null 2>&1; then
              kubectl port-forward svc/catalog-service 8081:80 -n dev &
              CATALOG_PID=$!
              sleep 10
              curl -f http://localhost:8081/health || echo "Catalog service not ready"
              kill $CATALOG_PID 2>/dev/null || true
            else
              echo "Catalog service not found"
            fi
            
            echo "Testing User service..."
            if kubectl get svc user-service -n dev > /dev/null 2>&1; then
              kubectl port-forward svc/user-service 8082:80 -n dev &
              USER_PID=$!
              sleep 10
              curl -f http://localhost:8082/health || echo "User service not ready"
              kill $USER_PID 2>/dev/null || true
            else
              echo "User service not found"
            fi
          else
            echo "ERROR: Dev namespace still not found!"
          fi
          
      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name netpol-test