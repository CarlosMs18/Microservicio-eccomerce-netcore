name: Development CI/CD

on:
  push:
    branches: [ main, ci-cd ]
  pull_request:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      cart: ${{ steps.changes.outputs.cart }}
      catalog: ${{ steps.changes.outputs.catalog }}
      user: ${{ steps.changes.outputs.user }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            cart:
              - 'src/Cart/**'
              - 'tests/Cart/**'
              - 'k8s/overlays/development/cart/**'
            catalog:
              - 'src/Catalog/**'
              - 'tests/Catalog/**'
              - 'k8s/overlays/development/catalog/**'
            user:
              - 'src/User/**'
              - 'tests/User/**'
              - 'k8s/overlays/development/user/**'

  ci-tests:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.cart == 'true' || needs.detect-changes.outputs.catalog == 'true' || needs.detect-changes.outputs.user == 'true'
    
    strategy:
      matrix:
        service: [cart, catalog, user]
        
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: P@ssw0rd123!
        ports:
          - 1433:1433
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          
      - name: Run Unit Tests
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: dotnet test tests/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}.UnitTests/ --configuration Release --verbosity normal
        
      - name: Run Integration Tests
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: dotnet test tests/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}/${{ matrix.service == 'cart' && 'Cart' || matrix.service == 'catalog' && 'Catalog' || 'User' }}.IntegrationTests/ --configuration Release --verbosity normal

  cd-deploy:
    needs: [detect-changes, ci-tests]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.cart == 'true' || needs.detect-changes.outputs.catalog == 'true' || needs.detect-changes.outputs.user == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          
      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: netpol-test
          config: infra/kind/kind-config.yaml
          
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Install Calico CNI (for Network Policies)
        run: |
          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
          kubectl wait --for=condition=Ready pods --all -n kube-system --timeout=300s
          
      - name: Install NGINX Ingress Controller
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
          
      - name: Build Changed Services
        run: |
          if [[ "${{ needs.detect-changes.outputs.cart }}" == "true" ]]; then
            echo "Building Cart service..."
            dotnet publish src/Cart/Cart.WebAPI/Cart.WebAPI.csproj -c Release -o src/Cart/Cart.WebAPI/publish
            docker build -t cart-service:dev -f src/Cart/Cart.WebAPI/Dockerfile .
            kind load docker-image cart-service:dev --name netpol-test
          fi
          
          if [[ "${{ needs.detect-changes.outputs.catalog }}" == "true" ]]; then
            echo "Building Catalog service..."
            dotnet publish src/Catalog/Catalog.WebApi/Catalog.WebAPI.csproj -c Release -o src/Catalog/publish
            docker build -t catalog-service:dev -f src/Catalog/Catalog.WebApi/Dockerfile .
            kind load docker-image catalog-service:dev --name netpol-test
          fi
          
          if [[ "${{ needs.detect-changes.outputs.user }}" == "true" ]]; then
            echo "Building User service..."
            dotnet publish src/User/User.WebAPI/User.WebAPI.csproj -c Release -o src/User/publish
            docker build -t user-service:dev -f src/User/User.WebAPI/Dockerfile .
            kind load docker-image user-service:dev --name netpol-test
          fi
          
      - name: Deploy Infrastructure First
        run: |
          echo "Creating namespace..."
          kubectl apply -f k8s/overlays/development/namespace.yaml
          
          echo "Deploying database..."
          kubectl apply -k k8s/overlays/development/database/
          
          echo "Deploying RabbitMQ..."
          kubectl apply -k k8s/overlays/development/rabbitmq/
          
          echo "Waiting for infrastructure to be ready..."
          kubectl wait --for=condition=ready pod -l app=sql-server -n dev --timeout=300s
          kubectl wait --for=condition=ready pod -l app=rabbitmq-service -n dev --timeout=300s
          
      - name: Deploy Application Services
        run: |
          echo "Deploying application services..."
          kubectl apply -k k8s/overlays/development/
          
      - name: Wait for Application Services
        run: |
          echo "Waiting for application services to be ready..."
          kubectl wait --for=condition=ready pod -l app=cart-service -n dev --timeout=300s || echo "Cart service timeout"
          kubectl wait --for=condition=ready pod -l app=catalog-service -n dev --timeout=300s || echo "Catalog service timeout"
          kubectl wait --for=condition=ready pod -l app=user-service -n dev --timeout=300s || echo "User service timeout"
          
      - name: Debug Deployment
        if: failure()
        run: |
          echo "=== Checking namespace ==="
          kubectl get namespace dev || echo "Namespace not found"
          
          echo "=== Checking deployments ==="
          kubectl get deployments -n dev || echo "No deployments found"
          
          echo "=== Checking pods ==="
          kubectl get pods -n dev -o wide || echo "No pods found"
          
          echo "=== Checking events ==="
          kubectl get events -n dev --sort-by=.metadata.creationTimestamp || echo "No events found"
          
          echo "=== Pod logs ==="
          kubectl logs -l app=sql-server -n dev --tail=50 || echo "No SQL logs"
          kubectl logs -l app=rabbitmq-service -n dev --tail=50 || echo "No RabbitMQ logs"
          kubectl logs -l app=cart-service -n dev --tail=50 || echo "No Cart logs"
          kubectl logs -l app=catalog-service -n dev --tail=50 || echo "No Catalog logs"
          kubectl logs -l app=user-service -n dev --tail=50 || echo "No User logs"
          
      - name: Test Deployment
        run: |
          echo "=== Final Status Check ==="
          kubectl get pods -o wide --all-namespaces
          kubectl get svc --all-namespaces
          kubectl get ingress -n dev
          kubectl get networkpolicies -n dev
          
          echo "=== Testing Services ==="
          
          if [[ "${{ needs.detect-changes.outputs.cart }}" == "true" ]]; then
            echo "Testing Cart service..."
            kubectl port-forward svc/cart-service 8080:80 -n dev &
            CART_PID=$!
            sleep 10
            curl -f http://localhost:8080/health || echo "Cart service not ready"
            kill $CART_PID 2>/dev/null || true
          fi
          
          if [[ "${{ needs.detect-changes.outputs.catalog }}" == "true" ]]; then
            echo "Testing Catalog service..."
            kubectl port-forward svc/catalog-service 8081:80 -n dev &
            CATALOG_PID=$!
            sleep 10
            curl -f http://localhost:8081/health || echo "Catalog service not ready"
            kill $CATALOG_PID 2>/dev/null || true
          fi
          
          if [[ "${{ needs.detect-changes.outputs.user }}" == "true" ]]; then
            echo "Testing User service..."
            kubectl port-forward svc/user-service 8082:80 -n dev &
            USER_PID=$!
            sleep 10
            curl -f http://localhost:8082/health || echo "User service not ready"
            kill $USER_PID 2>/dev/null || true
          fi
          
      - name: Cleanup
        if: always()
        run: |
          kind delete cluster --name netpol-test