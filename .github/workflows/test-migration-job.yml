name: Test Migration Job

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to test migration'
        required: true
        default: 'user'
        type: choice
        options:
          - user
          - cart
          - catalog
  push:
    branches:
      - rama-test-migration
    paths:
      - 'src/**'
      - '.github/workflows/**'

env:
  DOTNET_VERSION: '7.0.x'
  CLUSTER_NAME: 'migration-test'
  NAMESPACE: 'migration-test'

jobs:
  test-migration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Get service name
        id: get-service
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "service=${{ github.event.inputs.service }}" >> $GITHUB_OUTPUT
          else
            echo "service=user" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          config: infra/kind/kind-config.yaml
          
      - name: Wait for cluster to be ready
        run: |
          echo "Waiting for cluster to be ready..."
          kubectl cluster-info --context kind-${{ env.CLUSTER_NAME }}
          
          # Esperar a que el nodo esté Ready
          echo "Waiting for node to be Ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          
          # Verificar estado del nodo
          kubectl get nodes -o wide
          kubectl describe nodes
          
      - name: Setup kubectl context
        run: |
          kubectl config use-context kind-${{ env.CLUSTER_NAME }}
          kubectl cluster-info
          
      - name: Create local storage class
        run: |
          kubectl apply -f - <<EOF
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: rancher.io/local-path
          volumeBindingMode: WaitForFirstConsumer
          reclaimPolicy: Delete
          EOF
          
      - name: Create test namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }}
          
      - name: Test Azure SQL Connection
        run: |
          echo "Testing connectivity to Azure SQL Database"
          nslookup microservices-sql-server.database.windows.net || echo "DNS resolution failed"
          
      - name: Build service image
        run: |
          SERVICE=${{ steps.get-service.outputs.service }}
          echo "Building $SERVICE service for migration testing"
          
          if [[ "$SERVICE" == "user" ]]; then
            echo "Building User service..."
            dotnet publish src/User/User.WebAPI/User.WebAPI.csproj -c Release -o src/User/User.WebAPI/publish
            docker build -t user-service:migration-test -f src/User/User.WebAPI/Dockerfile .
            
            echo "Loading image to Kind cluster..."
            kind load docker-image user-service:migration-test --name ${{ env.CLUSTER_NAME }}
            
            # Verificar que la imagen se cargó correctamente
            docker exec -it ${{ env.CLUSTER_NAME }}-control-plane crictl images | grep user-service || echo "Image not found in cluster"
          fi
          
          echo "$SERVICE service image loaded successfully"

      - name: Create migration job
        run: |
          SERVICE=${{ steps.get-service.outputs.service }}
          TIMESTAMP=$(date +%s)
          
          echo "Creating migration job for $SERVICE service"
          
          # Verificar que hay nodos disponibles
          echo "Checking available nodes:"
          kubectl get nodes
          kubectl describe nodes | grep -A 5 "Taints"
          
          kubectl apply -f - <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${SERVICE}-migration-${TIMESTAMP}
            namespace: ${{ env.NAMESPACE }}
            labels:
              app: ${SERVICE}-migration
              service: ${SERVICE}
          spec:
            ttlSecondsAfterFinished: 600
            backoffLimit: 2
            template:
              metadata:
                labels:
                  app: ${SERVICE}-migration
                  service: ${SERVICE}
              spec:
                restartPolicy: Never
                tolerations:
                - key: node.kubernetes.io/not-ready
                  operator: Exists
                  effect: NoExecute
                  tolerationSeconds: 300
                containers:
                - name: migration
                  image: ${SERVICE}-service:migration-test
                  imagePullPolicy: Never
                  command: 
                  - /bin/sh
                  - -c
                  - |
                    echo "Starting database migration for ${SERVICE} service"
                    echo "Target: Azure SQL Database"
                    echo "Waiting for dependencies..."
                    sleep 15
                    
                    echo "Installing EF Core tools"
                    dotnet tool install --global dotnet-ef --version 7.0.* || echo "EF tools already installed"
                    export PATH="\$PATH:/root/.dotnet/tools"
                    
                    echo "Checking EF installation"
                    dotnet ef --version
                    
                    echo "Testing database connection"
                    dotnet ef dbcontext info --verbose --no-build || echo "Context info failed"
                    
                    echo "Running Entity Framework migrations"
                    dotnet ef database update --verbose --no-build
                    
                    echo "Migration completed successfully"
                  env:
                  - name: ASPNETCORE_ENVIRONMENT
                    value: "Development"
                  - name: ASPNETCORE_URLS
                    value: "http://+:80"
                  - name: ConnectionStrings__DefaultConnection
                    value: "Server=tcp:microservices-sql-server.database.windows.net,1433;Initial Catalog=microservices-db;Persist Security Info=False;User ID=sqladmin;Password=Admin123;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "100m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
          EOF
          
      - name: Monitor migration job
        run: |
          SERVICE=${{ steps.get-service.outputs.service }}
          
          echo "Monitoring migration job for $SERVICE service"
          
          # Mostrar el estado del job
          kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }}
          
          # Monitor con logs cada minuto durante máximo 10 minutos
          for i in {1..10}; do
            echo "=== Minute $i - Checking job status ==="
            
            # Ver estado del job
            kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }}
            
            # Ver logs actuales del pod
            echo "Current pod logs:"
            kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=20 || echo "No logs yet"
            
            # Verificar si completó
            if kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].status.conditions[?(@.type=="Complete")].status}' | grep -q "True"; then
              echo "Migration completed successfully!"
              break
            fi
            
            # Verificar si falló
            if kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].status.conditions[?(@.type=="Failed")].status}' | grep -q "True"; then
              echo "Migration failed!"
              kubectl describe job -l service=${SERVICE} -n ${{ env.NAMESPACE }}
              kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=100
              exit 1
            fi
            
            echo "Still running, waiting 60 seconds..."
            sleep 60
          done
          
          # Si llegamos aquí después de 10 minutos, timeout
          echo "Migration timed out after 10 minutes"
          echo "Final job description:"
          kubectl describe job -l service=${SERVICE} -n ${{ env.NAMESPACE }}
          echo "Final pod logs:"
          kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=100
          echo "Pod description:"
          kubectl describe pods -l service=${SERVICE} -n ${{ env.NAMESPACE }}
          exit 1
          
      - name: Verify migration results
        run: |
          SERVICE=${{ steps.get-service.outputs.service }}
          
          echo "Verifying migration results for $SERVICE service"
          kubectl get jobs -l service=${SERVICE} -n ${{ env.NAMESPACE }}
          kubectl logs -l service=${SERVICE} -n ${{ env.NAMESPACE }} --tail=50
          
      - name: Cleanup test environment
        if: always()
        run: |
          echo "Cleaning up test environment"
          kind delete cluster --name ${{ env.CLUSTER_NAME }} || echo "Cluster already deleted"