name: Test User, Catalog & Cart Migration

on:
  push:
    branches:
      - rama-catalog-testing-production-migration
  workflow_dispatch:

env:
  DOTNET_VERSION: '7.0.x'

jobs:
  test-migration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Install EF Tools
        run: |
          dotnet tool install --global dotnet-ef --version 7.0.*
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
          
      - name: List Directory Structure
        run: |
          echo "Checking directory structure..."
          find . -name "*.csproj" -type f | head -20
          ls -la src/
          if [ -d "src/Catalog" ]; then
            ls -la src/Catalog/
          fi
          if [ -d "src/User" ]; then
            ls -la src/User/
          fi
          if [ -d "src/Cart" ]; then
            ls -la src/Cart/
          fi
          
      - name: Create Databases if Not Exist
        run: |
          echo "Creating databases if they don't exist"
          mkdir temp-db-creation
          cd temp-db-creation
          dotnet new console
          dotnet add package System.Data.SqlClient
          
          cat > Program.cs << 'EOF'
          using System;
          using System.Data.SqlClient;
          
          try 
          {
              // Conectar al servidor master para crear bases de datos
              var masterConn = "Server=tcp:microservices-sql-server.database.windows.net,1433;Initial Catalog=master;User ID=sqladmin;Password=Admin123!;Encrypt=True;TrustServerCertificate=False;Connection Timeout=120;Command Timeout=120;";
              
              using var connection = new SqlConnection(masterConn);
              connection.Open();
              Console.WriteLine("Connected to master database");
              
              // Crear UserDB si no existe
              using var cmdUser = new SqlCommand(@"
                  IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'UserDB')
                  BEGIN
                      CREATE DATABASE [UserDB]
                      PRINT 'UserDB created successfully'
                  END
                  ELSE
                      PRINT 'UserDB already exists'
              ", connection);
              cmdUser.ExecuteNonQuery();
              
              // Crear CatalogDB si no existe
              using var cmdCatalog = new SqlCommand(@"
                  IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'CatalogDB')
                  BEGIN
                      CREATE DATABASE [CatalogDB]
                      PRINT 'CatalogDB created successfully'
                  END
                  ELSE
                      PRINT 'CatalogDB already exists'
              ", connection);
              cmdCatalog.ExecuteNonQuery();
              
              // Crear CartDB si no existe
              using var cmdCart = new SqlCommand(@"
                  IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'CartDB')
                  BEGIN
                      CREATE DATABASE [CartDB]
                      PRINT 'CartDB created successfully'
                  END
                  ELSE
                      PRINT 'CartDB already exists'
              ", connection);
              cmdCart.ExecuteNonQuery();
              
              Console.WriteLine("Database creation process completed");
          }
          catch(Exception ex)
          {
              Console.WriteLine($"Database creation failed: {ex.Message}");
              Environment.Exit(1);
          }
          EOF
          
          dotnet run
          cd ..
          
      - name: Test Database Connections
        run: |
          echo "Testing database connections after creation"
          mkdir temp-test
          cd temp-test
          dotnet new console
          dotnet add package System.Data.SqlClient
          
          cat > Program.cs << 'EOF'
          using System;
          using System.Data.SqlClient;
          using System.Threading.Tasks;
          
          Console.WriteLine("=== TESTING DATABASE CONNECTIONS ===");
          
          async Task TestConnection(string name, string connectionString, int retries = 3)
          {
              for (int i = 0; i < retries; i++)
              {
                  try 
                  {
                      using var connection = new SqlConnection(connectionString);
                      await connection.OpenAsync();
                      Console.WriteLine($"{name} Connection successful on attempt {i + 1}");
                      
                      using var cmd = new SqlCommand("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES", connection);
                      var count = await cmd.ExecuteScalarAsync();
                      Console.WriteLine($"{name} Tables found: {count}");
                      return;
                  }
                  catch(Exception ex)
                  {
                      Console.WriteLine($"{name} Connection attempt {i + 1} failed: {ex.Message}");
                      if (i < retries - 1)
                      {
                          Console.WriteLine($"Retrying {name} in 10 seconds...");
                          await Task.Delay(10000);
                      }
                      else
                      {
                          throw;
                      }
                  }
              }
          }
          
          try
          {
              var baseConn = "Server=tcp:microservices-sql-server.database.windows.net,1433;User ID=sqladmin;Password=Admin123!;Encrypt=True;TrustServerCertificate=False;Connection Timeout=120;Command Timeout=120;";
              
              await TestConnection("UserDB", baseConn + "Initial Catalog=UserDB;");
              await TestConnection("CatalogDB", baseConn + "Initial Catalog=CatalogDB;");
              await TestConnection("CartDB", baseConn + "Initial Catalog=CartDB;");
              
              Console.WriteLine("=== ALL CONNECTIONS OK ===");
          }
          catch(Exception ex)
          {
              Console.WriteLine($"Final connection test failed: {ex.Message}");
              Environment.Exit(1);
          }
          EOF
          
          dotnet run
          cd ..

      # ====== USER SERVICE ======
      - name: Build User Service
        run: |
          echo "Building User service for Production"
          if [ -f "src/User/User.WebAPI/User.WebAPI.csproj" ]; then
            cd src/User/User.WebAPI
            dotnet build --configuration Release
          else
            echo "User.WebAPI project not found at expected location"
            find . -name "User.WebAPI.csproj" -type f
            exit 1
          fi
          
      - name: Check User Migrations
        run: |
          echo "Checking User migrations"
          cd src/User/User.WebAPI
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="UserDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release || echo "No User migrations found"
          
      - name: Apply User Migrations
        run: |
          echo "Applying User migrations"
          cd src/User/User.WebAPI
          
          dotnet clean
          dotnet build --configuration Release
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="UserDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef database update --configuration Release --verbose
          
          echo "User migrations applied successfully"

      - name: Seed User Master Data  
        run: |
          echo "Seeding User master data"
          cd src/User/User.WebAPI
          
          export DB_SERVER="microservices-sql-server.database.windows.net"
          export DB_NAME="UserDB"
          export DB_USER="sqladmin"
          export DB_PASSWORD="Admin123!"
          
          dotnet run --configuration Release --seed-data --environment=Production
          
          echo "User seeding completed"

 
      - name: Build Catalog Service
        run: |
          echo "Building Catalog service for Production"
          cd src/Catalog/Catalog.WebApi
          dotnet build --configuration Release
          
      - name: Check Catalog Migrations
        run: |
          echo "Checking Catalog migrations"
          cd src/Catalog/Catalog.WebApi
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CatalogDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release || echo "No Catalog migrations found"
          
      - name: Apply Catalog Migrations
        run: |
          echo "Applying Catalog migrations"
          cd src/Catalog/Catalog.WebApi
          
          dotnet clean
          dotnet build --configuration Release
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CatalogDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef database update --configuration Release --verbose
          
          echo "Catalog migrations applied successfully"

      - name: Build Cart Service
        run: |
          echo "Building Cart service for Production"
          if [ -f "src/Cart/Cart.WebAPI/Cart.WebAPI.csproj" ]; then
            cd src/Cart/Cart.WebAPI
            dotnet build --configuration Release
          else
            echo "Cart.WebAPI project not found at expected location"
            find . -name "Cart.WebAPI.csproj" -type f
            exit 1
          fi
          
      - name: Check Cart Migrations
        run: |
          echo "Checking Cart migrations"
          cd src/Cart/Cart.WebAPI
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CartDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release || echo "No Cart migrations found"
          
      - name: Apply Cart Migrations
        run: |
          echo "Applying Cart migrations"
          cd src/Cart/Cart.WebAPI
          
          dotnet clean
          dotnet build --configuration Release
          
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CartDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef database update --configuration Release --verbose
          
          echo "Cart migrations applied successfully"

      - name: Seed Cart Master Data  
        run: |
          echo "Seeding Cart master data (if needed)"
          cd src/Cart/Cart.WebAPI
          
          export DB_SERVER="microservices-sql-server.database.windows.net"
          export DB_NAME="CartDB"
          export DB_USER="sqladmin"
          export DB_PASSWORD="Admin123!"
          
          
          echo "Cart seeding completed (or skipped if not implemented)"

      - name: Verify All Results
        run: |
          echo "Verifying all migration results"
          
          echo "=== USER MIGRATIONS ==="
          cd src/User/User.WebAPI
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="UserDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release
          
          echo ""
          echo "=== CATALOG MIGRATIONS ==="
          cd ../../../src/Catalog/Catalog.WebApi
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CatalogDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release
          
          echo ""
          echo "=== CART MIGRATIONS ==="
          cd ../../../src/Cart/Cart.WebAPI
          env ASPNETCORE_ENVIRONMENT=Production \
              DB_SERVER="microservices-sql-server.database.windows.net" \
              DB_NAME="CartDB" \
              DB_USER="sqladmin" \
              DB_PASSWORD="Admin123!" \
              dotnet ef migrations list --configuration Release
          
          echo ""
          echo " ALL MIGRATIONS COMPLETED SUCCESSFULLY FOR USER, CATALOG & CART! "